<!-- 

^..^ CAT(C) Soft || CATCalendar App for Huawei HarmonyOS 
-------------------------------------------------------
03 October 2024  || glebone@gmail.com iMac M1
 -->

<template>
  <div class="container">
    <!-- Year at the top -->
    <text class="year">{{year}}</text>
    
    <!-- Month and day of the week -->
    <text class="month-day">{{formattedDate}}</text>
    
    <!-- Bold day of the month -->
    <text class="date">{{displayDay}}</text>

    <!-- Sunrise and Sunset times -->
    <div class="sun-container">
      <text class="sun-time">ðŸŒ… Sunrise: {{sunrise}}</text>
      <text class="sun-time">ðŸŒ‡ Sunset: {{sunset}}</text>
    </div>
    
    <!-- Moon phase image and name -->
    <div class="moon-container">
      <text class="moon-image">{{moonEmoji}}</text> <!-- Dynamic moon phase emoji -->
      <text class="moon-phase">{{moonPhase}}</text>
    </div>
    
    <!-- Input for adding a note -->
    <input class="input" type="text" placeholder="Add note" value="{{note}}" @change="onNoteInput"/>
    
    <!-- Add button -->
    <text class="add-button" @click="addNote">Add</text>
    
    <!-- Confirmation message -->
    <text class="confirmation" v-if="confirmation">{{confirmation}}</text>
    
    <!-- Display existing notes -->
    <div class="notes-container" v-if="notes.length > 0">
      <text class="notes-title">Notes:</text>
      <text class="note" v-for="(note, index) in notes" :key="index">{{note}}</text>
    </div>
  </div>
</template>

<style>
  .container {
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    height: 100%;
    background-color: #F5E6D3; /* Sepia background */
    padding: 20px;
  }

  .year {
    font-size: 40px;
    margin-top: 10px;
    text-align: center;
    color: #4B3621; /* Dark brown font */
  }

  .month-day {
    font-size: 30px;
    text-align: center;
    margin-bottom: 10px;
    color: #4B3621; /* Dark brown font */
  }

  .date {
    font-size: 80px;
    font-weight: bold;
    margin: 20px;
    text-align: center;
    color: #4B3621; /* Dark brown font */
  }

  .sun-container {
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    width: 80%;
    margin: 20px;
  }

  .sun-time {
    font-size: 30px;
    width: 40%;
    text-align: center;
    color: #4B3621; /* Dark brown font */
  }

  .moon-container {
    flex-direction: column;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
  }

  .moon-image {
    font-size: 50px;
    color: #4B3621; /* Dark brown font */
  }

  .moon-phase {
    font-size: 30px;
    text-align: center;
    color: #4B3621; /* Dark brown font */
  }

  .input {
    font-size: 30px;
    width: 400px;
    height: 60px;
    border-width: 2px;
    border-color: #4B3621; /* Dark brown border */
    border-style: solid;
    border-radius: 10px;
    padding: 10px;
    margin: 20px;
    color: #4B3621; /* Dark brown font */
  }

  .add-button {
    font-size: 30px;
    color: white;
    background-color: #4B3621; /* Dark brown background */
    border-radius: 10px;
    width: 150px;
    height: 60px;
    text-align: center;
    line-height: 60px; /* Center text vertically */
    /* cursor: pointer; */ /* Removed unsupported 'cursor' style */
    margin-bottom: 20px;
  }

  .confirmation {
    font-size: 20px;
    color: green;
    margin-top: 10px;
  }

  .notes-container {
    width: 80%;
    margin-top: 20px;
  }

  .notes-title {
    font-size: 25px;
    color: #4B3621;
    margin-bottom: 10px;
  }

  .note {
    font-size: 20px;
    color: #4B3621;
    margin-bottom: 5px;
  }
</style>

<script>
  const fetch = require('@system.fetch');
  const storage = require('@system.storage');

  export default {
    data: {
      year: '',
      formattedDate: '',
      displayDay: '',
      filenameDate: '',
      sunrise: '',
      sunset: '',
      moonPhase: '',
      moonEmoji: 'ðŸŒ‘', // Initial moon emoji (New Moon)
      note: '',
      confirmation: '',
      notes: [],
    },
    onInit() {
      try {
        console.log('App initializing...');
        this.setDate();
        this.fetchSunriseSunset();
        this.calculateMoonPhase();
        this.loadNotes();
        this.$page.setTitleBar({
          text: 'menu',
          textColor: '#ffffff',
          backgroundColor: '#007DFF',
          backgroundOpacity: 0.5,
          menu: true
        });
        console.log('App initialized.');
      } catch (error) {
        console.error('Error during onInit:', error);
        this.confirmation = 'An unexpected error occurred.';
      }
    },
    setDate() {
      const today = new Date();
      this.year = today.getFullYear();
      
      const months = [
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'
      ];
      const daysOfWeek = [
        'Sunday', 'Monday', 'Tuesday', 'Wednesday',
        'Thursday', 'Friday', 'Saturday'
      ];

      const month = months[today.getMonth()];
      const dayOfWeek = daysOfWeek[today.getDay()];
      this.formattedDate = `${month}, ${dayOfWeek}`;
      this.displayDay = today.getDate();

      // Format date as "2024-10-03" for storage key
      const year = today.getFullYear();
      const monthNum = (today.getMonth() + 1).toString().padStart(2, '0');
      const day = today.getDate().toString().padStart(2, '0');
      this.filenameDate = `${year}-${monthNum}-${day}`;
      console.log(`Date set to ${this.filenameDate}`);
    },
    fetchSunriseSunset() {
      const lat = 49.4444;  // Latitude for Cherkasy, Ukraine
      const lng = 32.0598;  // Longitude for Cherkasy, Ukraine

      fetch.fetch({
        url: `https://api.sunrise-sunset.org/json?lat=${lat}&lng=${lng}&formatted=0`,
        method: 'GET',
        success: (data) => {
          try {
            const result = JSON.parse(data.data).results;
            const sunriseUTC = new Date(result.sunrise);
            const sunsetUTC = new Date(result.sunset);
            
            // Convert UTC to local time
            this.sunrise = this.formatTime(sunriseUTC);
            this.sunset = this.formatTime(sunsetUTC);
            console.log(`Sunrise: ${this.sunrise}, Sunset: ${this.sunset}`);
          } catch (error) {
            console.error('Error parsing sunrise/sunset data:', error);
            this.confirmation = 'Error fetching sunrise/sunset data.';
          }
        },
        fail: (data, code) => {
          console.error('Failed to fetch sunrise/sunset data', code);
          this.confirmation = 'Failed to fetch sunrise/sunset data.';
        }
      });
    },
    formatTime(date) {
      // Convert UTC time to local time and format as HH:MM
      const localHours = date.getHours().toString().padStart(2, '0');
      const localMinutes = date.getMinutes().toString().padStart(2, '0');
      return `${localHours}:${localMinutes}`;
    },
    calculateMoonPhase() {
      const today = new Date();
      const year = today.getFullYear();
      const month = today.getMonth() + 1;
      const day = today.getDate();

      let r = year % 100;
      r %= 19;
      if (r > 9) {
        r -= 19;
      }
      r = ((r * 11) % 30) + month + day;

      if (month < 3) {
        r += 2;
      }

      const phase = r % 30;

      // Determine the moon phase based on the calculated value
      if (phase < 1) {
        this.moonPhase = 'New Moon';
        this.moonEmoji = 'ðŸŒ‘'; // New Moon
      } else if (phase < 7) {
        this.moonPhase = 'Waxing Crescent';
        this.moonEmoji = 'ðŸŒ’'; // Waxing Crescent
      } else if (phase < 14) {
        this.moonPhase = 'First Quarter';
        this.moonEmoji = 'ðŸŒ“'; // First Quarter
      } else if (phase < 21) {
        this.moonPhase = 'Full Moon';
        this.moonEmoji = 'ðŸŒ•'; // Full Moon
      } else if (phase < 28) {
        this.moonPhase = 'Waning Crescent';
        this.moonEmoji = 'ðŸŒ˜'; // Waning Crescent
      } else {
        this.moonPhase = 'New Moon';
        this.moonEmoji = 'ðŸŒ‘'; // New Moon
      }
      console.log(`Moon Phase: ${this.moonPhase}`);
    },
    onNoteInput(event) {
      console.log('Note input changed:', event.value);
      this.note = event.value;
    },
    addNote() {
      if (this.note.trim() === '') {
        this.confirmation = 'Note is empty. Please enter a note.';
        return;
      }

      const storageKey = `note_${this.filenameDate}`;
      const newNote = this.note.trim();

      try {
        // Get existing notes
        storage.get({
          key: storageKey,
          success: (data) => {
            let existingNotes = [];
            if (data.value) {
              try {
                existingNotes = JSON.parse(data.value);
              } catch (error) {
                console.error('Error parsing stored notes:', error);
                existingNotes = [];
              }
            }
            existingNotes.push(newNote);
            console.log(`Adding note: "${newNote}" to key: "${storageKey}"`);

            // Save updated notes
            storage.set({
              key: storageKey,
              value: JSON.stringify(existingNotes),
              success: () => {
                this.confirmation = 'Note added successfully!';
                this.note = ''; // Clear input
                this.notes = existingNotes; // Update notes display
                console.log('Note saved successfully.');
              },
              fail: (data, code) => {
                console.error('Failed to save note', code);
                this.confirmation = 'Failed to add note.';
              }
            });
          },
          fail: (data, code) => {
            if (code === -1) { // Key not found, initialize new notes array
              const existingNotes = [newNote];
              console.log(`Creating new notes array with note: "${newNote}"`);

              storage.set({
                key: storageKey,
                value: JSON.stringify(existingNotes),
                success: () => {
                  this.confirmation = 'Note added successfully!';
                  this.note = ''; // Clear input
                  this.notes = existingNotes; // Update notes display
                  console.log('New note array created and note saved successfully.');
                },
                fail: (data, code) => {
                  console.error('Failed to save note', code);
                  this.confirmation = 'Failed to add note.';
                }
              });
            } else {
              console.error('Failed to get existing notes', code);
              this.confirmation = 'Failed to add note.';
            }
          }
        });
      } catch (error) {
        console.error('Error during addNote:', error);
        this.confirmation = 'An unexpected error occurred while adding the note.';
      }
    },
    loadNotes() {
      const storageKey = `note_${this.filenameDate}`;
      console.log(`Loading notes for key: "${storageKey}"`);

      storage.get({
        key: storageKey,
        success: (data) => {
          if (data.value) {
            try {
              this.notes = JSON.parse(data.value);
              console.log(`Loaded notes: ${this.notes}`);
            } catch (error) {
              console.error('Error parsing stored notes:', error);
              this.notes = [];
            }
          }
        },
        fail: (data, code) => {
          if (code === -1) { // Key not found, no notes yet
            this.notes = [];
            console.log('No existing notes found.');
          } else {
            console.error('Failed to load notes', code);
            this.notes = [];
          }
        }
      });
    }
  }
</script>