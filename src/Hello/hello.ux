<!-- 

^..^ CAT(C) Soft || CATCalendar App for Huawei HarmonyOS 
-------------------------------------------------------
03 October 2024  || glebone@gmail.com iMac M1
 -->

<template>
  <div class="container">
    <!-- Year at the top -->
    <text class="year">{{year}}</text>
    
    <!-- Month and day of the week with navigation buttons -->
    <div class="month-day-container">
      <text class="nav-button" @click="previousDay">&lt;</text>
      <text :class="['month-day', dateColor]">{{formattedDate}}</text>
      <text class="nav-button" @click="nextDay">&gt;</text>
    </div>
    
    <!-- Bold day of the month -->
    <text class="date">{{displayDay}}</text>

    <!-- Sunrise and Sunset times -->
    <div class="sun-container">
      <text class="sun-time">ðŸŒ… Sunrise: {{sunrise}}</text>
      <text class="sun-time">ðŸŒ‡ Sunset: {{sunset}}</text>
    </div>
    
    <!-- Moon phase image and name -->
    <div class="moon-container">
      <text class="moon-image">{{moonEmoji}}</text>
      <text class="moon-phase">{{moonPhase}}</text>
    </div>
    
    <!-- Input for adding a note -->
    <input class="input" type="text" placeholder="Add note" value="{{note}}" @change="onNoteInput" @blur="onBlur"/>
    
    <!-- Add button -->
    <text class="add-button" @click="addNote">Add</text>
    
    <!-- Scrollable notes area -->
    <div class="notes-container">
      <list class="notes-list">
        <list-item type="text" for="(note, index) in notes" :key="index">
          <text class="note">{{note}}</text>
        </list-item>
      </list>
    </div>
  </div>
</template>


<style>
  .container {
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    height: 100%;
    background-color: #F5E6D3;
    padding: 20px;
  }

  .year {
    font-size: 40px;
    margin-top: 10px;
    text-align: center;
    color: #4B3621;
  }

  .month-day-container {
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    margin-bottom: 10px;
  }

  .month-day {
    font-size: 30px;
    text-align: center;
  }

  .date {
    font-size: 80px;
    font-weight: bold;
    margin: 20px;
    text-align: center;
  }

  .sun-container {
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    width: 80%;
    margin: 20px;
  }

  .sun-time {
    font-size: 30px;
    width: 40%;
    text-align: center;
    color: #4B3621;
  }

  .moon-container {
    flex-direction: column;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
  }

  .moon-image {
    font-size: 50px;
    color: #4B3621;
  }

  .moon-phase {
    font-size: 30px;
    text-align: center;
    color: #4B3621;
  }

  .input {
    font-size: 30px;
    width: 400px;
    height: 60px;
    border-width: 2px;
    border-color: #4B3621;
    border-style: solid;
    border-radius: 10px;
    padding: 10px;
    margin: 20px;
    color: #4B3621;
  }

  .add-button {
    font-size: 30px;
    color: white;
    background-color: #4B3621;
    border-radius: 10px;
    width: 150px;
    height: 60px;
    text-align: center;
    line-height: 60px;
    margin-bottom: 20px;
  }

  .notes-container {
    flex-direction: column;
    align-items: center;
    width: 100%;
    max-height: 150px;
  }

  .notes-list {
    width: 100%;
  }

  .note {
    font-size: 20px;
    color: #4B3621;
    padding: 5px 0;
  }

  .nav-button {
    font-size: 40px;
    color: #4B3621;
    margin: 0 20px;
  }

  /* Dynamic colors for date display */
  .today {
    color: black;
  }

  .future {
    color: blue;
  }

  .past {
    color: green;
  }
</style>

<script>
  const fetch = require('@system.fetch');
  const storage = require('@system.storage');

  export default {
    data: {
      today: new Date(),
      currentDate: new Date(),
      year: '',
      formattedDate: '',
      displayDay: '',
      sunrise: '',
      sunset: '',
      moonPhase: '',
      moonEmoji: 'ðŸŒ‘', // Initial moon emoji (New Moon)
      note: '',
      notes: [],
      confirmation: '',
      dateColor: 'today', // Default color for today
      inputFocused: false
    },
    onInit() {
      this.updateDateInfo();
    },
    updateDateInfo() {
      const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

      this.year = this.currentDate.getFullYear();
      const month = months[this.currentDate.getMonth()];
      const dayOfWeek = daysOfWeek[this.currentDate.getDay()];
      this.formattedDate = `${month}, ${dayOfWeek}`;
      this.displayDay = this.currentDate.getDate();

      const todayString = this.today.toDateString();
      const currentString = this.currentDate.toDateString();

      if (todayString === currentString) {
        this.dateColor = 'today';
      } else if (this.currentDate > this.today) {
        this.dateColor = 'future';
      } else {
        this.dateColor = 'past';
      }

      this.fetchSunriseSunset();
      this.calculateMoonPhase();
      this.loadNotes();
    },
    previousDay() {
      this.currentDate.setDate(this.currentDate.getDate() - 1);
      this.updateDateInfo();
    },
    nextDay() {
      this.currentDate.setDate(this.currentDate.getDate() + 1);
      this.updateDateInfo();
    },
    fetchSunriseSunset() {
      const lat = 49.4444;  // Latitude for Cherkasy, Ukraine
      const lng = 32.0598;  // Longitude for Cherkasy, Ukraine

      fetch.fetch({
        url: `https://api.sunrise-sunset.org/json?lat=${lat}&lng=${lng}&date=${this.currentDate.toISOString().split('T')[0]}&formatted=0`,
        method: 'GET',
        success: (data) => {
          const result = JSON.parse(data.data).results;
          const sunriseUTC = new Date(result.sunrise);
          const sunsetUTC = new Date(result.sunset);

          this.sunrise = this.formatTime(sunriseUTC);
          this.sunset = this.formatTime(sunsetUTC);
        },
        fail: (data, code) => {
          console.error('Failed to fetch sunrise/sunset data', code);
        }
      });
    },
    formatTime(date) {
      const localHours = date.getHours().toString().padStart(2, '0');
      const localMinutes = date.getMinutes().toString().padStart(2, '0');
      return `${localHours}:${localMinutes}`;
    },
    calculateMoonPhase() {
      const today = this.currentDate;
      const year = today.getFullYear();
      const month = today.getMonth() + 1;
      const day = today.getDate();

      let r = year % 100;
      r %= 19;
      if (r > 9) {
        r -= 19;
      }
      r = ((r * 11) % 30) + month + day;

      if (month < 3) {
        r += 2;
      }

      const phase = r % 30;

      if (phase < 1) {
        this.moonPhase = 'New Moon';
        this.moonEmoji = 'ðŸŒ‘';
      } else if (phase < 7) {
        this.moonPhase = 'Waxing Crescent';
        this.moonEmoji = 'ðŸŒ’';
      } else if (phase < 14) {
        this.moonPhase = 'First Quarter';
        this.moonEmoji = 'ðŸŒ“';
      } else if (phase < 21) {
        this.moonPhase = 'Full Moon';
        this.moonEmoji = 'ðŸŒ•';
      } else if (phase < 28) {
        this.moonPhase = 'Waning Crescent';
        this.moonEmoji = 'ðŸŒ˜';
      } else {
        this.moonPhase = 'New Moon';
        this.moonEmoji = 'ðŸŒ‘';
      }
    },
    onNoteInput(event) {
      this.note = event.value;
    },
    onBlur() {
      this.inputFocused = false;
    },
    addNote() {
      if (this.note.trim() === '') {
        this.confirmation = 'Note is empty. Please enter a note.';
        return;
      }

      const storageKey = `note_${this.currentDate.toISOString().split('T')[0]}`;
      const newNote = this.note.trim();

      storage.get({
        key: storageKey,
        success: (data) => {
          let existingNotes = [];
          if (data.value) {
            try {
              existingNotes = JSON.parse(data.value);
            } catch (error) {
              console.error('Error parsing stored notes:', error);
              existingNotes = [];
            }
          }
          existingNotes.push(newNote);

          storage.set({
            key: storageKey,
            value: JSON.stringify(existingNotes),
            success: () => {
              this.confirmation = 'Note added successfully!';
              this.note = ''; // Clear input
              this.notes = existingNotes; // Update notes display
              // Attempt to blur input to dismiss the keyboard
              this.inputFocused = false;
            },
            fail: (data, code) => {
              console.error('Failed to save note', code);
              this.confirmation = 'Failed to add note.';
            }
          });
        },
        fail: (data, code) => {
          if (code === -1) { // Key not found, initialize new notes array
            const existingNotes = [newNote];

            storage.set({
              key: storageKey,
              value: JSON.stringify(existingNotes),
              success: () => {
                this.confirmation = 'Note added successfully!';
                this.note = ''; // Clear input
                this.notes = existingNotes; // Update notes display
                // Attempt to blur input to dismiss the keyboard
                this.inputFocused = false;
              },
              fail: (data, code) => {
                console.error('Failed to save note', code);
                this.confirmation = 'Failed to add note.';
              }
            });
          } else {
            console.error('Failed to get existing notes', code);
            this.confirmation = 'Failed to add note.';
          }
        }
      });
    },
    loadNotes() {
      const storageKey = `note_${this.currentDate.toISOString().split('T')[0]}`;

      storage.get({
        key: storageKey,
        success: (data) => {
          if (data.value) {
            try {
              this.notes = JSON.parse(data.value);
            } catch (error) {
                   console.error('Error parsing stored notes:', error);
              this.notes = [];
            }
          } else {
            this.notes = [];
          }
        },
        fail: (data, code) => {
          if (code === -1) { // Key not found, no notes yet
            this.notes = [];
          } else {
            console.error('Failed to load notes', code);
            this.notes = [];
          }
        }
      });
    }
  }
</script>